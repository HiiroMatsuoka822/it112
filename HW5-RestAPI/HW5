from flask import Flask, jsonify, request
import sqlite3
import json

app = Flask(__name__)

# Database setup (using SQLite for simplicity)
DATABASE = 'items.db'

def get_db_connection():
    """
    Establishes a connection to the SQLite database.
    Handles potential connection errors and returns a connection object.
    """
    try:
        conn = sqlite3.connect(DATABASE)
        conn.row_factory = sqlite3.Row # Allows accessing columns by name
        return conn
    except sqlite3.Error as e:
        print(f"Error connecting to database: {e}")
        return None  # Important: Return None on failure

def init_db():
    """
    Initializes the database schema.
    Creates the 'items' table if it doesn't exist.
    """
    conn = get_db_connection()
    if conn is not None:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    description TEXT
                )
            ''')
            conn.commit()
            cursor.close()
        except sqlite3.Error as e:
            print(f"Error initializing database: {e}")
        finally:
            conn.close()
    # If conn is None, init_db will effectively do nothing,
    # preventing further errors in the application.

# Initialize the database when the application starts
init_db()

@app.route('/items', methods=['GET'])
def get_items():
    """
    API endpoint to retrieve all items from the database.
    Returns a JSON response containing the items.
    Handles database connection errors.
    """
    conn = get_db_connection()
    if conn is not None:
        try:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM items')
            items = cursor.fetchall()
            cursor.close()
            conn.close()

            # Convert rows to a list of dictionaries for JSON serialization
            items_list = [dict(item) for item in items]
            return jsonify(items_list), 200
        except sqlite3.Error as e:
            print(f"Error fetching items: {e}")
            return jsonify({'error': 'Failed to retrieve items from the database'}), 500
        finally:
            if conn:
                conn.close()
    else:
        return jsonify({'error': 'Failed to connect to the database'}), 500

@app.route('/items', methods=['POST'])
def create_item():
    """
    API endpoint to create a new item in the database.
    Accepts JSON data with 'name' and 'description' fields.
    Returns a JSON response with the created item data.
    Handles database connection and insertion errors.
    """
    data = request.get_json()
    if not data:
        return jsonify({'error': 'Invalid JSON data'}), 400

    name = data.get('name')
    description = data.get('description')

    if not name:
        return jsonify({'error': 'Name is required'}), 400

    conn = get_db_connection()
    if conn is not None:
        try:
            cursor = conn.cursor()
            cursor.execute('INSERT INTO items (name, description) VALUES (?, ?)', (name, description))
            conn.commit()
            cursor.execute('SELECT * FROM items WHERE id = ?', (cursor.lastrowid,))
            new_item = cursor.fetchone()  # Fetch the newly inserted item
            cursor.close()
            conn.close()

            # Convert the row to a dictionary for JSON serialization
            if new_item:
                new_item_dict = dict(new_item)
                return jsonify(new_item_dict), 201 # Return 201 Created on success
            else:
                return jsonify({'error': 'Failed to retrieve newly inserted item'}), 500

        except sqlite3.Error as e:
            print(f"Error creating item: {e}")
            conn.rollback()  # Rollback on error
            return jsonify({'error': 'Failed to create item in the database'}), 500
        finally:
            if conn:
                conn.close()
    else:
        return jsonify({'error': 'Failed to connect to the database'}), 500

if __name__ == '__main__':
    app.run(debug=True)
